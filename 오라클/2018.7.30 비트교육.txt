Drop table banana;
purge recyclebin;

Create TABLE banana(
  name varchar(20),
  age number,
  salary number,
  home varchar(10)
);

SELECT * FROM tab;

INSERT INTO banana values('김현민',25,1000,'서울');
INSERT INTO banana values('윤은솔',24,1000,'김해');
INSERT INTO banana values('정우현',25,1000,'부산');
INSERT INTO banana values('홍길동',20,300,'대구');
INSERT INTO banana values('호랑이',15,500,'인천');
INSERT INTO banana values('코끼리',35,500,'인천');
INSERT INTO banana values('사자',43,700,'대구');
INSERT INTO banana values('토끼',52,200,'인천');
INSERT INTO banana values('거북이',18,1200,'서울');
INSERT INTO banana values('독수리',31,1500,'김해');

SELECT * FROM banana;

/*----------------------------------------------*/

--ex14 desc Describe: 기술하다.
테이블의 필드를 보여준다.

desc banana;

/*----------------------------------------------*/

--ex15 order by
데이터 정렬

SELECT * FROM banana ORDER by name;

Ascending ASC:오름차순 생략되어 있다.
SELECT * FROM banana ORDER by salary ASC;

Descending order DESC: 내림차순
SELECT * FROM banana ORDER by salary DESC;

2차 정렬은 콤마 뒤에 사용
SELECT * FROM banana ORDER by home, name;

ASC가 생략되어 있다.
SELECT * FROM banana ORDER by home ASC, name ASC;

DESC도 섞어서 사용 가능하다.
SELECT * FROM banana ORDER by home ASC, name DESC;

둘 다 DESC가 아니라 home은 ASC이다.
SELECT * FROM banana ORDER by home, name DESC;

1번 필드를 사용
SELECT * FROM banana ORDER by 1;

/*----------------------------------------------*/

--ex16 where 조건문

월급이 500보다 큰 모든 사람 출력
SELECT * FROM banana where salary>500;

SELECT * FROM banana where salary>500;
SELECT * FROM banana where salary>=500;
SELECT * FROM banana where salary<500;
SELECT * FROM banana where salary<=500;

sql에서는 =으로 사용
SELECT * FROM banana where salary=500;

다른거는 !=, <> 사용
SELECT * FROM banana where salary!=500;

산술도 가능하다.
SELECT * FROM banana where salary*12>=8000;
SELECT name FROM banana where salary*12>=8000;

긴 문장은 이렇게 잘라서 쓴다.
SELECT name, salary 월급, salary*12 연봉 
FROM banana 
WHERE salary*12>=8000;

몇 명인지
SELECT count(*) 
FROM banana 
WHERE salary*12>=8000;

조건과 정렬
SELECT * FROM banana 
WHERE salary>=800
ORDER by name ASC;

/*----------------------------------------------*/
--ex17
--and, or

두가지 조건을 같이 사용 30<= age <=50
SELECT * FROM banana 
WHERE age>=30 and age<=50 
ORDER by age;

나이와 연봉을 두가지 조건 줄 수 있다.
다른 필드로 조건 사용 가능

나이가 30 이상이고 연봉이 500이하인 사람
SELECT * FROM banana 
WHERE age>=30 and salary<=500 
ORDER by age;

집이 부산이고 연봉이 1500이하인 사람
SELECT * FROM banana 
WHERE home = '부산' and salary<=1500;

나이가 30이하 이거나 50이상 인사람
SELECT * FROM banana 
WHERE age<=30 or age>=50;

나이가 40 넘고 연봉이 작은 사람
SELECT * FROM banana 
WHERE age>=40 or salary<=500 
ORDER by age;

OR을 연속해서 사용 가능
SELECT * FROM banana 
WHERE age>=40 or salary<=500 or home='부산'
ORDER by age;

AND와 OR을 같이 사용 가능
괄호를 사용하는 것이 좋다.
SELECT * FROM banana
WHERE (age>=30 and age<=50) or home='부산';

/*----------------------------------------------*/
--ex18
LIKE

홍으로 시작하는 사람
SELECT * FROM banana
WHERE name LIKE '홍%';

홍으로 끝나는 사람
SELECT * FROM banana
WHERE name LIKE '%홍';

LIKE와 = 는 다른 함수이다.
SELECT * FROM banana
WHERE name = '홍%';

/*----------------------------------------------*/
--ex19
BETWEEN

SELECT * FROM banana
WHERE age>=30 and age<=50;

위에 문장과 같다.
순자를 거꾸로 하는 것은 조심하자

SELECT * FROM banana
WHERE age BETWEEN 30 and 50;

/*----------------------------------------------*/
--ex20
WHERE IN

SELECT * FROM banana
WHERE home = '부산' or home = '서울';

위에 문장과 동일하다.

SELECT * FROM banana
WHERE home IN ('부산','서울');

IN을 사용하여 한 번에 묶는 것이 좋다.
SELECT * FROM banana
WHERE home IN ('부산','서울','인천');

SELECT * FROM banana
WHERE (age BETWEEN 30 AND 50) 
AND (home IN ('부산','서울'))
ORDER by name;

/*----------------------------------------------*/
--ex21
어떤 값이 들어올지 모를 떄

--any

SELECT * FROM banana
WHERE age>30 or age>40 or age>50;

SELECT * FROM banana
WHERE age>any(30,40,50);

SELECT * FROM banana
WHERE age>any(&a,&b,&c);

<30 or <40 or <50
SELECT * FROM banana
WHERE age<any(30,40,50);

--all

제일 큰 것보다 큰사람
SELECT * FROM banana
WHERE age>all(30,40,50);

제일 작은 것보다 작은사람
SELECT * FROM banana
WHERE age<all(30,40,50);

서울에 사는 사람 최소 연봉 보다 많이 받는 사람
SELECT * FROM banana
WHERE salary > any(SELECT salary FROM banana WHERE home = '서울')

/*----------------------------------------------*/
--ex22
rownum

위에서 순서대로 4개를 뽑는다.
SELECT * FROM banana
WHERE rownum <= 4;

뽑아서 정렬한다.
SELECT * FROM banana
WHERE rownum <= 4
ORDER by age;

/*----------------------------------------------*/

--ex23 최대, 최소

SELECT MAX(age), MIN(age) FROM banana;

나이가 제일 많은 사람의 정보를 모두 볼 수 있다.
SELECT * FROM banana 
WHERE age = (SELECT MAX(age) FROM banana);

연봉이 제일 적은 사람의 정보
SELECT * FROM banana
WHERE salary = (SELECT MIN(salary) FROM banana);

/*----------------------------------------------*/

--ex24 sum

SELECT sum(salary) FROM banana;

/*----------------------------------------------*/

--ex25 avg

SELECT sum(salary), avg(age) FROM banana;

/*----------------------------------------------*/

--ex26

원하는 사람을 빼고

SELECT max(salary) FROM banana 
WHERE name != '독수리';

SELECT * FROM banana 
WHERE salary = (SELECT max(salary) FROM banana WHERE name != '독수리');

SELECT * FROM banana
WHERE salary >= (SELECT avg(salary) FROM banana);

/*----------------------------------------------*/

--ex27
UPDATE

UPDATE banana SET name = '앵무새' WHERE name = '홍길동';
SELECT * FROM banana WHERE name = '앵무새';

/*----------------------------------------------*/

--ex28
DELETE

DELETE FROM banana WHERE name = '앵무새';
SELECT * FROM banana;

/*----------------------------------------------*/

CRUD

C
INSERT INTO banana values('김현민',25,1000,'서울');

R
SELECT * FROM banana;

U
UPDATE banana SET name = '앵무새' 
WHERE name = '홍길동';
SELECT * FROM banana WHERE name = '앵무새';

D                                      
DELETE FROM banana WHERE name = '앵무새';
SELECT * FROM banana;





